Maple 2018 Conversion Notes
===========================

Working on grF_createSymFn

Using 2017 as a template:

grF_createSymFn(0,{},{}):
proc (objectName, root, calcFn) local gr_data; if grG_calc and assigned(calcFn) then gr_data[root, grG_metricName, grG_operands] := calcFn(objectName, []) end if; grF_symCore(objectName, [], root); RETURN() end proc

Want Maple 2018 to produce the same thing:


Friday Sept 21:
- Rupup calcFnParams are wrong (fixed)

Tues Sept 25
- display og G(dn,up,cdn) is not happening. Components are non-zero when do a grdata([Gdnupcdn_])

symmetry routines confuse me. Inside some loops there is a calcFn call in others a symCore call. Why?
- it is what does e.g. simplification if there is no need to calculate 
- also does grF_component, so clears is zero flag for display
- if set grOptionVerbose, should see some stuff
- yep, not actually calling grF_symCore
**BUG**
- tried using grtensor:-grF_symCore
- tried exporting grF_symCore
- could look at providing it as an argument, since calcFn seems to work ok...
- other inert functions seem to do ok...

Sept. 26, 2018
Issue with overview. The RN section does something to screw up the calculation of Kerr killing. Get kt(dn,dn,dn) with unassigned gr_data. 
- when trim the RN calc this does not happen
- need to look at the defintion and see if the issue is with construction?
- may be some variable previously unassigned that causes issues when run through subsequent grdefs...
Yep: gr_data[root, reisnord, grG_operands, a1_, a2_, a3_] := calcFn(objectName, [a1_, a2_, a3_])
The previous metric reisnord is being used in the defintion, not grG_metricName. 
- either need to unassign it, or delay it's eval.
FIX: unassign grG_metricName at the start
TODO: Need to check every other inert case to make sure this issue cannot occur. 

List of places that use FromInert():
	contract.mpl
	create.mpl
	grdef.mpl
	parse.mpl

Use grF_unassignMetricNames()/grF_restoreMetrics()


Sept 27, 2018
=============
Bug in symmetry routines. LSH is missing indices:
	gr_data[root, grG_metricName, grG_operands] := gr_data[root, grG_metricName, grG_operands, a1_, a2_, a3_, a4_]



Test Plan
=========
Unit tests for symmetric and asymmetric symmetry creation
Check some standard objects:
- definition of Chr1
- definition of Rabcd
- contraction to Ricci and Gab
- specify components of a vector

